name: Compilar Kernel 32bits
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Cache apt packages
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-${{ hashFiles('**/.github/workflows/build_32.yml') }}

      - name: Instalar dependências e Toolchain ARM 32-bit
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            libncurses-dev \
            bison \
            flex \
            libssl-dev \
            libelf-dev \
            bc \
            rsync \
            git \
            wget \
            gcc-arm-linux-gnueabihf \
            device-tree-compiler \
            lzop \
            u-boot-tools \
            cpio \
            kmod

      - name: Limpar build anterior
        run: |
          make ARCH=arm mrproper || true
          rm -rf kernel_output || true

      - name: Configurar o Kernel
        run: |
          export ARCH=arm
          export CROSS_COMPILE=arm-linux-gnueabihf-
          export LOCALVERSION="-s905x-arm32"

          make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- meson64_a32_defconfig

      - name: Exibir informações da configuração
        run: |
          echo "=== Compilador ==="
          arm-linux-gnueabihf-gcc --version

      - name: Compilar o Kernel
        run: |
          export ARCH=arm
          export CROSS_COMPILE=arm-linux-gnueabihf-
          
          make -j$(nproc) \
               ARCH=arm \
               CROSS_COMPILE=arm-linux-gnueabihf- \
               UIMAGE_LOADADDR=0x1008000 \
               uImage 2>&1 | tee build_kernel.log || {
            echo "=== Erro na compilação do kernel ==="
            tail -100 build_kernel.log
            exit 1
          }

      - name: Compilar DTBs
        run: |
          export ARCH=arm
          export CROSS_COMPILE=arm-linux-gnueabihf-
          make -j$(nproc) \
               ARCH=arm \
               CROSS_COMPILE=arm-linux-gnueabihf- \
               dtbs 2>&1 | tee build_dtbs.log || {
            echo "=== Erro na compilação dos DTBs ==="
            tail -100 build_dtbs.log
            exit 1
          }

      - name: Compilar e Instalar Módulos
        run: |
          export ARCH=arm
          export CROSS_COMPILE=arm-linux-gnueabihf-
          make -j$(nproc) \
               ARCH=arm \
               CROSS_COMPILE=arm-linux-gnueabihf- \
               modules 2>&1 | tee build_modules.log || {
            echo "=== Erro na compilação dos módulos ==="
            tail -100 build_modules.log
            exit 1
          }
          mkdir -p kernel_output
          make ARCH=arm \
               CROSS_COMPILE=arm-linux-gnueabihf- \
               INSTALL_MOD_PATH=kernel_output \
               INSTALL_MOD_STRIP=1 \
               modules_install

          # Limpeza dos diretórios desnecessários
          rm -rf kernel_output/lib/modules/*/build
          rm -rf kernel_output/lib/modules/*/source

      - name: Preparar artefatos
        run: |
          mkdir -p kernel_output/{boot,dtbs,logs}

          if [ -f "arch/arm/boot/uImage" ]; then
            cp arch/arm/boot/uImage kernel_output/boot/
            echo "uImage copiado com sucesso"
          else
            echo "ERRO: uImage não encontrado!"
            ls -la arch/arm/boot/
            exit 1
          fi
          
          shopt -s nullglob
          dtbs=(arch/arm/boot/dts/amlogic/gxl_p212_*.dtb)
          if [ ${#dtbs[@]} -eq 0 ]; then
            echo "ERRO: Nenhum DTB gxl_p212_* encontrado!"
            ls -la arch/arm/boot/dts/amlogic/
            exit 1
          else
            cp "${dtbs[@]}" kernel_output/dtbs/
            echo "DTBs gxl_p212_* copiados com sucesso"
          fi
          
          cp .config kernel_output/
          cp build_*.log kernel_output/logs/ 2>/dev/null || true

      - name: Upload dos Artefatos
        uses: actions/upload-artifact@v4
        with:
          name: kernel-s905x-arm32
          path: kernel_output/
