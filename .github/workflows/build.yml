name: Compilar Kernel Amlogic

# Este workflow será acionado manualmente a partir da aba "Actions" do GitHub
on:
  workflow_dispatch:

jobs:
  build:
    # A máquina virtual que executará o trabalho
    runs-on: ubuntu-latest

    steps:
      # 1. Baixa o código-fonte do seu repositório
      - name: Checkout do código
        uses: actions/checkout@v4

      # 2. Instala todas as dependências necessárias para a compilação cruzada
      - name: Instalar dependências
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libncurses-dev bison flex libssl-dev libelf-dev bc rsync git gcc-aarch64-linux-gnu

      # 3. Configura o Kernel
      - name: Configurar o Kernel
        run: |
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- meson_g12a_defconfig
          # Você pode trocar 'meson_g12a_defconfig' pela configuração específica do seu dispositivo.
          # Verifique as configurações disponíveis em 'arch/arm64/configs/'

      # 4. Compila o Kernel
      # Usamos $(nproc) para usar todos os núcleos de CPU disponíveis no runner
      - name: Compilar o Kernel e os DTBs
        run: |
          make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- -j$(nproc)

      # 5. Empacota os arquivos compilados para download
      - name: Preparar artefatos
        run: |
          mkdir -p ../kernel_output/
          # Copia a imagem principal do kernel
          cp arch/arm64/boot/Image ../kernel_output/
          # Copia os Device Tree Blobs (DTBs)
          cp -r arch/arm64/boot/dts/amlogic/ ../kernel_output/dts/

      # 6. Faz o upload dos arquivos compilados como um "artefato"
      - name: Upload dos Artefatos
        uses: actions/upload-artifact@v4
        with:
          name: Kernel-Amlogic
          path: ../kernel_output/
